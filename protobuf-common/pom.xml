<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.acumos.sparkrunner</groupId>
	<artifactId>protobuf-common</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>protobuf common jar</name>

	<properties>
		<!-- <java.version>1.8</java.version> -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- For distributionManagement section -->
		<acumos.nexus.url>https://nexus.acumos.org</acumos.nexus.url>
		<!-- Jenkins invokes mvn with argument -Dbuild.number=${BUILD_NUMBER} -->
		<build.number>0</build.number>
		<eelf.version>1.0.0</eelf.version>
		<jacocoVersion>0.7.6.201602180812</jacocoVersion>
		<sonar.exclusions>**/scripts/**/*,**.js</sonar.exclusions>
		<sonar.test.exclusions>**/test/**/*,**/tests/**/*</sonar.test.exclusions>
		<enforcer.skip>false</enforcer.skip>
		<mockito.version>1.10.19</mockito.version>
	</properties>
	
	<dependencies>

		<!-- For Dynamic protobuf message construction -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.9.1</version>
		</dependency>

		<dependency>
			<groupId>com.github.os72</groupId>
			<artifactId>protobuf-dynamic</artifactId>
			<version>0.9.4</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.17</version>
				<configuration>
					<licenseName>acumos</licenseName>
					<licenseResolver>${project.baseUri}/src/license</licenseResolver>
					<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
					<processStartTag>===============LICENSE_START=======================================================</processStartTag>
					<processEndTag>===============LICENSE_END=========================================================</processEndTag>
					<sectionDelimiter>===================================================================================</sectionDelimiter>
					<inceptionYear>2017</inceptionYear>
					<organizationName><![CDATA[AT&T Intellectual Property & Tech Mahindra. All rights reserved.]]></organizationName>
					<projectName>Acumos</projectName>
					<canUpdateCopyright>true</canUpdateCopyright>
					<canUpdateDescription>true</canUpdateDescription>
					<canUpdateLicense>true</canUpdateLicense>
					<emptyLineAfterHeader>true</emptyLineAfterHeader>
				</configuration>
			</plugin>
			<!-- <plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<skip>true</skip>
						</configuration>
					</execution>
				</executions>
			</plugin> -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<!-- Spring sets the <version></version> -->
				<configuration>
					<!-- <source>1.8</source>
					<target>1.8</target> -->
					<release>11</release>
					<fork>true</fork>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.1.1</version>

				<!-- spring chooses the <version>x</version> -->
				<configuration>
					<!-- during upgrade to jdk 11 
					found that portal-fe javadoc build fails due to 
					issues with different spring versions and only one is being used
					by the javadoc:aggregate job-->	
					<skip>true</skip>
					<aggregate>false</aggregate>	<!-- this enables aggretation -->
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Add the build number to the jar manifest. Spring-Boot uses a complex 
				packaging process that makes access to the original Manifest.MF very difficult. 
				However, Java provides access to the implementation version for a package, 
				so cram the build number into there. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<!-- Spring sets the <version>2.5</version> -->
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version}-b${build.number}</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>